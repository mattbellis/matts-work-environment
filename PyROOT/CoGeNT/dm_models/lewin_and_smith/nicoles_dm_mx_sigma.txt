//going to turn lambdaNR and nNR into mass and cross section - use stuff from CoGeNT anaylysis
	// DM signal - Parameterization of c1*R0*m/(E0*r)exp(-c2*ER/(E0*r)) for DM signal from PF Smith
	// E0=1/2*MD*v0^2, where MD is the dark matter mass, and v0 is the galactic rotation velocity, 
	// E0 should be in the same units as the energy (keV), need to convert GeV to keV and convert v0 into units of c
	// r=4MD*MT/(MD+MT)^2, where MT is the mass of the target in the same units as the dark matter->r is unitless
	// R0, total event rate per unit mass, R0=2*N0*rhoD*sigma0*v0/(Sqrt(Pi)*AW*MD), 
	// AW is the target mass in AMU, AW=MT/pmass, N0 is Avogadro's Number, 
	// rhoD is the mass density of the DM ~0.3GeV/c^2/cm^3, sigmaSIp is the proton cross section in cm^2~ 10^-40, 
	// need to convert v0 to cm/s to make everything work out
	// sigma0=sigmaSIp*AW^2*muTD^2/muPD^2, where muTD is the reduced mass of dark matter and target, 
	// and muPD is the reduced mass of the dark matter and proton muAB=MA*MB/(MA+MB)
	// in the end R0 is in counts/s/g, multiply by number of seconds per day for total pdf to be in counts/day/keV
	// m is active detector mass in grams
	// c1=0.751 and c2=0.561 averaged over the year

	char form[1000];
	double pi=3.14159;
	double secsperday=86400;
	
	RooRealVar C1("C1", "C1", 0.751);
	RooRealVar C2("C2", "C2", 0.561);
	
	//mass of WIMP
	RooRealVar MD("MD", "MD", 7, 4, 25, "GeV/c^2");
	//molar mass Ge
	RooRealVar AW("AW", "AW", 72.63, "amu");
	
	//in km/s
	double c = 299792;
	double GeVtokeV = 1000000;
	
	//in GeV/c^2
	//this accounts for binding energy somehow
	double pmass = 0.932;

	sprintf(form, "AW*%lf", pmass);
	//target mass in GeV/c^2
	RooFormulaVar MT("MT", form, RooArgList(AW));
	
	RooFormulaVar r("r", "4*MD*MT/(MD+MT)^2", RooArgList(MD, MT));
	
	RooFormulaVar muTD("muTD", "MD*MT/(MD+MT)", RooArgList(MD, MT));
	
	sprintf(form, "%lf*MD/(%lf+MD)", pmass, pmass);
	RooFormulaVar muPD("muPD", form, RooArgList(MD));
	
	RooRealVar v0("v0", "v0", 220, "km/s");

	//average kinetic energy of DM in keV
	sprintf(form, "MD*v0*v0*%lf/%lf/%lf/2.0", GeVtokeV, c, c);
	RooFormulaVar E0("E0", form, RooArgList(MD, v0));

	//RooFormulaVar lambdaNR("lambdaNR", "lambdaNR", "-@0/@1/@2", RooArgList(C2, E0, r));
	RooRealVar lambdaNR("lambdaNR", "lambdaNR", -0.6, -10, 0);	
	RooExponential expNR("expNR", "expNR", keVnr, lambdaNR);
	
	RooProdPdf aNR("aNR", "aNR", gaussNR, expNR);
	RooProdPdf bNR("bNR", "bNR", gaussNR, flatNR);
	
	RooRealVar expfracNR("expfracNR", "expfracNR", 1, 0, 1);
	
	RooAddPdf NR("NR", "NR", aNR, bNR, expfracNR);
	
	
	
	RooRealVar rhoD("rhoD", "rhoD", 0.3, "GeV/c^2/cm^3");	
	RooRealVar sigmaSIp("sigmaSIp", "sigmaSIp", 2e-41, 1e-42, 1e-39, "cm^2");
	RooFormulaVar sigma0("sigma0", "sigmaSIp*AW*AW*muTD*muTD/muPD/muPD", RooArgList(muTD, muPD, AW, sigmaSIp));
	
	double fconstant=0.00692;
	
	//accounting for form factor - approximating as linear and picking an average energy, i.e. only comes into play in the rate
	// The 2 is really made up - but gives the correct answer.
	sprintf(form, "sigma0*(1-2*E0*%lf*%lf*AW^(5/3)/3)", fconstant, fconstant);
	RooFormulaVar sigma("sigma", "sigma", form, RooArgList(sigma0, AW, E0));
	
	double kmtocm = 100000;
	
	sprintf(form, "2*%lf*rhoD*sigma*v0*%lf*%lf/sqrt(%lf)/AW/MD", TMath::Na(), kmtocm, secsperday, pi);
	RooFormulaVar R0("R0", form, RooArgList(rhoD, sigma, v0, AW, MD));
	
	RooRealVar exposure("exposure", "exposure", 442, "kg-days");
	
	RooRealVar vesc("vesc", "vesc", 550, "km/s");
	
	//For this use CoGeNT quenching factor to convert from keVee to keVnr - see end of code

	RooRealVar keVnrmin("keVnrmin", "keVnrmin", keVnrlow);
	// cutoff energy is either 14.02 keVnr or the cutoff energy from the escape velocity whichever is lower
	RooFormulaVar Ecutoff("Ecutoff", "Ecutoff", "(vesc*vesc/v0/v0+log(C1))*E0*r/C2", RooArgList(vesc, v0, C1, E0, r, C2));
	
	sprintf(form, "(%lf<Ecutoff)*%lf+(%lf>Ecutoff)*Ecutoff", keVnrhigh, keVnrhigh, keVnrhigh);
	RooFormulaVar keVnrmax("keVnrmax", "keVnrmax", form, RooArgList(Ecutoff));
	
	RooRealVar k0k1("k0k1", "k0k1", 0.9965);
	
	//now putting nNR in terms of R0
	sprintf(form, "k0k1*C1*exposure*1000*R0/C2*(exp(lambdaNR*keVnrmin)-exp(lambdaNR*keVnrmax))");
	RooFormulaVar nNRexp("nNRexp", "nNRexp", form, RooArgList(k0k1, C1, exposure, R0, C2, lambdaNR, keVnrmin, keVnrmax));
	sprintf(form, "k0k1*exposure*R0*(keVnrmax-keVnrmin)*exp(-vesc*vesc/v0/v0)/E0/r");
	RooFormulaVar nNRlin("nNRlin", "nNRlin", form, RooArgList(k0k1, exposure, R0, keVnrmin, keVnrmax, E0, r, vesc, v0));

	
	//RooFormulaVar nNR("nNR", "@0-@1", RooArgList(nNRexp, nNRlin));

	RooRealVar nNR("nNR", "nNR", 200, 0, 3000);


//Quenching Factor Stuff
	//here Eionize = LEnergy
	//Eionize = Qscale*(Erecoil)^Qpow
	//Erecoil = (Eionize/Qscale)^(1/Qpow)
	//dErecoil/dEionize = (1/Qscale/Qpow)*(Eionize/Qscale)^(1/Qpow-1)
	double Qscale = 0.19935;
	double Qpow = 1.1204;
	

	
	RooRealVar rooQscale("rooQscale", "rooQscale", Qscale);
	RooRealVar rooQpow("rooQpow", "rooQpow", Qpow);
	
	
	RooFormulaVar Erecoil("Erecoil", "(LEnergy/rooQscale)^(1/rooQpow)", RooArgList(LEnergy, rooQscale, rooQpow));
	RooFormulaVar dERdEI("dERdEI", "(1/rooQscale/rooQpow)*(LEnergy/rooQscale)^(1/rooQpow-1)", RooArgList(LEnergy, rooQscale, rooQpow));
	
	sprintf(form, "(%lf/rooQscale)^(1/rooQpow)", Emin);
	RooFormulaVar rooEmin("rooEmin", form, RooArgList(rooQscale, rooQpow));	
	
	sprintf(form, "(%lf/rooQscale)^(1/rooQpow)", LEmax);
	RooFormulaVar rooLEmax("rooLEmax", form, RooArgList(rooQscale, rooQpow));

	
