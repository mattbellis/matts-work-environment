#!/usr/bin/env python

from ROOT import *

from array import *
import sys

gROOT.Reset()
gStyle.SetPadRightMargin(0.15)
gStyle.SetPadLeftMargin(0.20)
gStyle.SetPadBottomMargin(0.20)
gStyle.SetFrameFillColor(0)




################################################################################
################################################################################

# R e a d   w o r k s p a c e   f r o m   f i l e
# -----------------------------------------------

# Open input file with workspace (generated by rf14_wspacewrite)
f = TFile(sys.argv[1])

# Retrieve workspace from file
#w = f.Get("w") # RooWorkspace 
w = f.Get("workspace_mcstudy_LambdaC_ntp1_pass0_sideband_first_pure_sig26_bkg1400_fixedSig_nfits1000") # RooWorkspace 

w.Print()
x = w.var("x")
z = w.var("z")
data = w.data("dataset_0")

print w.allPdfs()

ras = w.allPdfs()

rsize = ras.getSize()
print rsize

iter = ras.createIterator()

# Name to plot
# Background
#pdf_name = "argus"

pdf = None

# Signal
pdf_name = "CB"
pdf_nn = w.pdf("rpsf_s")

# Grab the pdf we want to plot
for i in range(0,rsize):
    p = iter.Next();
    name = p.GetName()
    print name
    if name==pdf_name:
        pdf = p

# Print structure of composite p.d.f.
pdf.Print("t")
pdf_nn.Print("t")

nbins = 100

# Plot data and PDF overlaid
xframe = x.frame(RooFit.Title("Model and data read from workspace"),RooFit.Bins(nbins)) # RooPlot
rllist = RooLinkedList()
rllist.Add(RooFit.MarkerSize(0.5))
print data
data.plotOn(xframe,rllist)
pdf.plotOn(xframe)

# Plot data and PDF overlaid
zframe = z.frame(RooFit.Title("Model and data read from workspace"),RooFit.Bins(nbins)) # RooPlot
rllist = RooLinkedList()
rllist.Add(RooFit.MarkerSize(0.5))
print data
data.plotOn(zframe,rllist)
pdf_nn.plotOn(zframe)

# Overlay the background component of model with a dashed line
#pdf.plotOn(xframe,RooFit.Components("bkg"),RooFit.LineStyle(kDashed))

# Overlay the background+sig2 components of model with a dotted line
#pdf.plotOn(xframe,RooFit.Components("bkg,sig2"),RooFit.LineStyle(kDotted))



# Draw the frame on the canvas
c = TCanvas("rf503_wspaceread","rf503_wspaceread",10,10,900,600)
c.Divide(1,2)

c.cd(1)
gPad.SetLeftMargin(0.15)
xframe.GetYaxis().SetTitleOffset(1.4)
xframe.Draw()
gPad.Update()

c.cd(2)
gPad.SetLeftMargin(0.15)
zframe.GetYaxis().SetTitleOffset(1.4)
zframe.Draw()
gPad.Update()


## Wait for input to keep the GUI (which lives on a ROOT event dispatcher) alive
if __name__ == '__main__':
    rep = ''
    while not rep in [ 'q', 'Q' ]:
        rep = raw_input( 'enter "q" to quit: ' )
        if 1 < len(rep):
            rep = rep[0]
