#!/usr/bin/env python
# example of macro to read data from an ascii file and
# create a root file with a Tree.
#
# NOTE: comparing the results of this macro with those of staff.C, you'll
# notice that the resultant file is a couple of bytes smaller, because the
# code below strips all white-spaces, whereas the .C version does not.

import re, array
from array import array
from ROOT import *


### function to read in data from ASCII file and fill the ROOT tree
def fillTree():

  xf = array('f', 10*[0.])
  xi = array('i', [0])

  ######################################################
  # Let's create the tree.
  ######################################################
  f = TFile( 'test.root', 'RECREATE' )
  tree = TTree( 'T', 'Here\'s some data to analyze' )
  tree.Branch( 'x', xf, 'x/F' )
  
  ######################################################
  # Fill some header info about the code used to create
  # this file.
  ######################################################
  list = TList()
  s_gen_info = []
  s_gen_info.append(TObjString("Created on today's date."))
  s_gen_info.append(TObjString("Release of software XXX."))
  s_gen_info.append(TObjString("Generated by code YYY."))
  s_gen_info.append(TObjString("More descriptions about how this file was created or how it is intended to be used."))

  for s in s_gen_info:
    list.Add(s)
  list.SetName("Information about how this file was generated")

  tree.GetUserInfo().Add(list)


  ######################################################
  # Fill some header info about the data that will be
  # stored in this file.
  ######################################################
  lists = []

  names = []
  name  = "Name" ; names.append( name )
  name  = "Units" ; names.append( name )
  name  = "Latex units" ; names.append( name )
  name  = "Root units" ; names.append( name )
  name  = "Description" ; names.append( name )

  name_list = TList()
  for n in names: 
    temp_string = TObjString( n )
    name_list.Add(temp_string)

  name_list.SetName("Description of entries in header")
  tree.GetUserInfo().Add( name_list )

  for i in range(0,5):
    vals = []
    list = TList()

    s1 = []

    value = "x%d" % (i) ; vals.append( value )
    value = "GeV/c^2"  ; vals.append( value )
    value = "$GeV/c^2$"; vals.append( value )
    value = "GeV/c^{2}"; vals.append( value )
    value = "Mass of a particle" ; vals.append( value )

    for v in vals: 
      temp_string = TObjString( v )
      s1.append(temp_string)

    for s in s1:
      s.Print("v")
      #tree.GetUserInfo().Add(s)
      list.Add(s)

    name = "Information about %s" % ( str(s1[0]) )
    list.SetName(name)
    lists.append(list)

  for l in lists:
    tree.GetUserInfo().Add(l)


  ######################################################
  # Fill the tree.
  ######################################################
  for i in range(0,10):
    xf[0] = float(i)
    tree.Fill()

  tree.Print()
  tree.Write()

#### run fill function if invoked on CLI
if __name__ == '__main__':
   fillTree()
